#include <SPI.h>
#include <avr/pgmspace.h>

// Registers
#define REG_Product_ID                           0x00
#define REG_Revision_ID                          0x01
#define REG_Motion                               0x02
#define REG_Delta_X_L                            0x03
#define REG_Delta_X_H                            0x04
#define REG_Delta_Y_L                            0x05
#define REG_Delta_Y_H                            0x06
#define REG_SQUAL                                0x07
#define REG_Pixel_Sum                            0x08
#define REG_Maximum_Pixel                        0x09
#define REG_Minimum_Pixel                        0x0a
#define REG_Shutter_Lower                        0x0b
#define REG_Shutter_Upper                        0x0c
#define REG_Frame_Period_Lower                   0x0d
#define REG_Frame_Period_Upper                   0x0e
#define REG_Configuration_I                      0x0f
#define REG_Configuration_II                     0x10
#define REG_Frame_Capture                        0x12
#define REG_SROM_Enable                          0x13
#define REG_Run_Downshift                        0x14
#define REG_Rest1_Rate                           0x15
#define REG_Rest1_Downshift                      0x16
#define REG_Rest2_Rate                           0x17
#define REG_Rest2_Downshift                      0x18
#define REG_Rest3_Rate                           0x19
#define REG_Frame_Period_Max_Bound_Lower         0x1a
#define REG_Frame_Period_Max_Bound_Upper         0x1b
#define REG_Frame_Period_Min_Bound_Lower         0x1c
#define REG_Frame_Period_Min_Bound_Upper         0x1d
#define REG_Shutter_Max_Bound_Lower              0x1e
#define REG_Shutter_Max_Bound_Upper              0x1f
#define REG_LASER_CTRL0                          0x20
#define REG_Observation                          0x24
#define REG_Data_Out_Lower                       0x25
#define REG_Data_Out_Upper                       0x26
#define REG_SROM_ID                              0x2a
#define REG_Lift_Detection_Thr                   0x2e
#define REG_Configuration_V                      0x2f
#define REG_Configuration_IV                     0x39
#define REG_Power_Up_Reset                       0x3a
#define REG_Shutdown                             0x3b
#define REG_Inverse_Product_ID                   0x3f
#define REG_Motion_Burst                         0x50
#define REG_SROM_Load_Burst                      0x62
#define REG_Pixel_Burst                          0x64
#define PIN_MOTION                               2

byte initComplete = 0;
byte testctr = 0;
unsigned long currTime;
unsigned long timer;
unsigned long pollTimer;
volatile int xydat[4];
volatile byte movementflag = 1;
const int ncs = 53;
float X_dis = 0.00 , Y_dis = 0.00;


extern const unsigned short firmware_length;
extern const unsigned char firmware_data[];

float x = 0.00, y = 0.00;

void setup() {
  //Serial.begin(9600);
  // Serial.begin(14400);
  // Serial.begin(19200);
  // Serial.begin(28800);
  //Serial.begin(38400);
  //Serial.begin(57600);
  Serial.begin(74880);
  //Serial.begin(115200);
  Serial.println("Laser_Sensor_ADNS9800");

  pinMode (ncs, OUTPUT);
  pinMode (PIN_MOTION, INPUT);

  //attachInterrupt(0, UpdatePointer, FALLING);

  SPI.begin();
  SPI.setDataMode(SPI_MODE3);
  SPI.setBitOrder(MSBFIRST);
  SPI.setClockDivider(8);

  performStartup();
  dispRegisters();
  delay(5000);
  initComplete = 9;


}

void adns_com_begin() {
  digitalWrite(ncs, LOW);
}

void adns_com_end() {
  digitalWrite(ncs, HIGH);
}

byte adns_read_reg(byte reg_addr) {
  adns_com_begin();

  // send adress of the register, with MSBit = 0 to indicate it's a read
  SPI.transfer(reg_addr & 0x7f );
  delayMicroseconds(100); // tSRAD
  // read data
  byte data = SPI.transfer(0);

  delayMicroseconds(1); // tSCLK-NCS for read operation is 120ns
  adns_com_end();
  delayMicroseconds(19); //  tSRW/tSRR (=20us) minus tSCLK-NCS

  return data;
}

void adns_write_reg(byte reg_addr, byte data) {
  adns_com_begin();

  //send adress of the register, with MSBit = 1 to indicate it's a write
  SPI.transfer(reg_addr | 0x80 );
  //sent data
  SPI.transfer(data);

  delayMicroseconds(20); // tSCLK-NCS for write operation
  adns_com_end();
  delayMicroseconds(100); // tSWW/tSWR (=120us) minus tSCLK-NCS. Could be shortened, but is looks like a safe lower bound
}

void configureSensor(void) {
  // Disable rest mode, 0x08 = fixed frame rate, disable AGC

  modifyReg("Configuration_II", REG_Configuration_II, 0x08 + 0x10);

  // Default value for Shutter_Max_Bound is 0x4e20, this allows long exposure but limits maximum frame rate.
  // Frame rate, defined by Frame_Period_Max_Bound register, which must be written last in this sequence,
  // is constrained by this formula:
  // Frame_Period_Max_Bound >= Frame_Period_Min_Bound + Shutter_Max_Bound

  uint16_t shutterMaxBound = 0x4e20;

  uint16_t parameter = 0x0fa0;         


  // shutterMaxBound default value = 0x4e20, 0x100 allows 11748 fps(the actual frame rate is 11748, nominally is 12000 FPS) tracking but requires better surface quality

  modifyReg16("Shutter_Max_Bound", REG_Shutter_Max_Bound_Upper, shutterMaxBound);
  delay(2);
  modifyReg16("Frame_Period_Min_Bound", REG_Frame_Period_Min_Bound_Upper, parameter);
  delay(2);

  // 0x0fa0 is the minimal allowed value
  // Set upper frame bound (default 0x5dc0 = 0x4e20 + 0x0fa0)
  // This register must be written last. This write also activates Shutter_Max_Bound and Frame_Period_Min_Bound settings.

  
  uint16_t Max_Bound = parameter + shutterMaxBound; 
  modifyReg16("Frame_Period_Max_Bound", REG_Frame_Period_Max_Bound_Upper, Max_Bound);

  // Read the Frame_Period_Max_Bound register in the last sequence to activate the the new setting, a good pratice is to read this register and write it back.
  // Must seriously wait after setting this register
  delay(2);

  // The right configuration_2 is 00 0 1 1 0 00£¬
  // which means 00_(Normal operation) + 0_(Normal opeartion without REST modes) + 1_(AGC is disabled) + 1_(fixed frame rate) + 0_(XY axes CPI setting in sync) + 00_(must be set to 00)

}

// Verbosely read and modify a 8-bit register. Return value read back from the register after the operation.
uint8_t modifyReg(const char* name, uint8_t addr, uint8_t newvalue)
{
  Serial.print(name); Serial.print(" "); Serial.print(adns_read_reg(addr), HEX);
  adns_write_reg(addr, newvalue);
  Serial.print(" -> ");
  uint8_t readback = adns_read_reg(addr);
  Serial.println(readback, HEX);

  return readback;
}

// Verbosely read and modify a 16-bit register. Return value read back from the register after the operation.
uint16_t modifyReg16(const char* name, uint8_t addr_upper, uint16_t newvalue)
{
  Serial.print(name);
  Serial.print(" ");
  uint16_t oldval = (adns_read_reg(addr_upper) << 8) + adns_read_reg(addr_upper - 1);
  adns_write_reg(addr_upper - 1, newvalue & 0xff);
  adns_write_reg(addr_upper, newvalue >> 8);
  Serial.print(oldval, HEX);
  uint16_t readback = (adns_read_reg(addr_upper) << 8) + adns_read_reg(addr_upper - 1);
  Serial.print(" -> "); Serial.println(readback, HEX);

  return readback;
}


void adns_upload_firmware() {
  // send the firmware to the chip, cf p.18 of the datasheet
  Serial.println("Uploading firmware...");
  // set the configuration_IV register in 3k firmware mode
  adns_write_reg(REG_Configuration_IV, 0x02); // bit 1 = 1 for 3k mode, other bits are reserved

  // write 0x1d in SROM_enable reg for initializing
  adns_write_reg(REG_SROM_Enable, 0x1d);

  // wait for more than one frame period
  delay(10); // assume that the frame rate is as low as 100fps... even if it should never be that low

  // write 0x18 to SROM_enable to start SROM download
  adns_write_reg(REG_SROM_Enable, 0x18);

  // write the SROM file (=firmware data)
  adns_com_begin();
  SPI.transfer(REG_SROM_Load_Burst | 0x80); // write burst destination adress
  delayMicroseconds(15);

  // send all bytes of the firmware
  unsigned char c;
  for (int i = 0; i < firmware_length; i++) {
    c = (unsigned char)pgm_read_byte(firmware_data + i);
    SPI.transfer(c);
    delayMicroseconds(15);
  }
  adns_com_end();
}


void performStartup(void) {
  adns_com_end(); // ensure that the serial port is reset
  adns_com_begin(); // ensure that the serial port is reset
  adns_com_end(); // ensure that the serial port is reset
  adns_write_reg(REG_Power_Up_Reset, 0x5a); // force reset
  delay(50); // wait for it to reboot
  // read registers 0x02 to 0x06 (and discard the data)
  adns_read_reg(REG_Motion);
  adns_read_reg(REG_Delta_X_L);
  adns_read_reg(REG_Delta_X_H);
  adns_read_reg(REG_Delta_Y_L);
  adns_read_reg(REG_Delta_Y_H);
  // upload the firmware
  adns_upload_firmware();
  delay(10);
  adns_write_reg(REG_Configuration_I, 0x09); // resolution is 1800 cpi by default,
  delay(10);
  configureSensor();
  delay(10);
  //enable laser(bit 0 = 0b), in normal mode (bits 3,2,1 = 000b)
  // reading the actual value of the register is important because the real
  // default value is different from what is said in the datasheet, and if you
  // change the reserved bytes (like by writing 0x00...) it would not work.
  byte laser_ctrl0 = adns_read_reg(REG_LASER_CTRL0);
  adns_write_reg(REG_LASER_CTRL0, laser_ctrl0 & 0xf0 );

  delay(1);

  Serial.println("Optical Chip Initialized");
}


void dispRegisters(void) {
  int oreg[14] = {
    0x00, 0x3F, 0x2A, 0x02, 0x0f, 0x10, 0x0e, 0x0d, 0x1b, 0x1a, 0x1d, 0x1c, 0x1f, 0x1e
  };
  char* oregname[] = {
    "Product_ID", "Inverse_Product_ID", "SROM_Version", "Motion", "Resolution", "Frame rate", "Frame_Period_Upper", "Frame_Period_Lower", "Frame_Period_Max_Bound_Upper", "Frame_Period_Max_Bound_Lower", "Frame_Period_Min_Bound_Upper", "Frame_Period_Min_Bound_Lower", "Shutter_Max_Bound_Upper", "Shutter_Max_Bound_Lower"
  };
  byte regres;

  digitalWrite(ncs, LOW);

  int rctr = 0;
  for (rctr = 0; rctr < 14; rctr++) {
    SPI.transfer(oreg[rctr]);
    delay(1);
    Serial.println("-------------");
    Serial.println(oregname[rctr]);
    Serial.println(oreg[rctr], HEX);
    regres = SPI.transfer(0);
    Serial.println(regres, BIN);
    Serial.println(regres, HEX);
    delay(1);
  }
  digitalWrite(ncs, HIGH);
  Serial.println("---");
  Serial.println("Ready to measure the displacement");
  Serial.println("---");
}



int convTwosComp(int b) {
  //Convert from 2's complement
  if (b & 0x80) {
    b = -1 * ((b ^ 0xff) + 1);
  }
  return b;
}

void UpdatePointer(void) {
  if (initComplete == 9) {

    digitalWrite(ncs, LOW);
    //Serial.print("Motion = ");
    //Serial.println(digitalRead(PIN_MOTION), HEX);
    // Read the register sequentially
    byte motion = adns_read_reg(REG_Motion);
    xydat[0] = (int)adns_read_reg(REG_Delta_X_L);
    xydat[1] = (int)adns_read_reg(REG_Delta_X_H);
    xydat[2] = (int)adns_read_reg(REG_Delta_Y_L);
    xydat[3] = (int)adns_read_reg(REG_Delta_Y_H);


    //Serial.print(motion, HEX);

    digitalWrite(ncs, HIGH);

    movementflag = 1;
  }
}



/////////////////////////////////////////////////////////// Main Program ////////////////////////////////////////////////////////////////////////
void loop() {

  currTime = millis();

  if (currTime > timer) {
    Serial.println(testctr++);
    timer = currTime + 1000;
  }

  if (currTime > pollTimer) {

    UpdatePointer();

    xydat[0] = convTwosComp(xydat[0]);
    xydat[2] = convTwosComp(xydat[2]);
    x = xydat[0];
    y = xydat[2];

    // Here we just need to use delta_x and delta_y to test the sampling frequency parameters calibration.
    // Integrate delta_x and delta_y to calculate the total displacement
    //X_dis = X_dis + x;
    //Y_dis = Y_dis + y;

    if (xydat[0] != 0 || xydat[2] != 0) {

      // Print the delta_x and delta_y
      Serial.print("delta_x = ");
      Serial.print((float)x / 1800 * 25.4);    // Convert the counts into length with unit "mm"
      Serial.print(" | ");
      Serial.print("delta_y = ");
      Serial.println((float)y / 1800 * 25.4);

      //       To measure the total displacement
      //      Serial.print("\t");
      //      Serial.print("X = ");
      //      Serial.print(X_dis / 1800 * 25.4);
      //      Serial.print("   |   ");
      //      Serial.print("Y = ");
      //      Serial.println(Y_dis / 1800 * 25.4);

    }
    pollTimer = currTime + 10; // Set a small time interval between two polling operation
  }

}



